{
    "openapi": "3.0.0",
    "info": {
        "title": "Globalstd Challenge API",
        "description": "Documentaci√≥n de la API de GlobalSTD",
        "contact": {
            "email": "soporte@globalstd.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost",
            "description": "API GlobalSTD - Servidor principal"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Authenticate a user and return an access token along with user information",
                "operationId": "authLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Access token for the authenticated user",
                                            "type": "string"
                                        },
                                        "user": {
                                            "description": "Authenticated user data",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "roles": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or inactive account"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "description": "Invalidate the current access token and logout the user",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/media/{media}": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "Get media file",
                "description": "Serve or redirect a media file. Resize if image using query params `w` and `h`.",
                "operationId": "getMediaFile",
                "parameters": [
                    {
                        "name": "media",
                        "in": "path",
                        "description": "ID of the media file",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "w",
                        "in": "query",
                        "description": "Optional width for image resizing",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 300
                        }
                    },
                    {
                        "name": "h",
                        "in": "query",
                        "description": "Optional height for image resizing",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 200
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media file served successfully",
                        "headers": {
                            "Content-Type": {
                                "description": "MIME type of the file",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to S3 public URL"
                    },
                    "404": {
                        "description": "Media not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Media not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/media": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Upload a media file",
                "description": "Store a media file and associate it to the authenticated user",
                "operationId": "uploadMedia",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file",
                                    "collection"
                                ],
                                "properties": {
                                    "file": {
                                        "description": "The file to upload",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "collection": {
                                        "description": "The collection or category of the media (e.g., avatar, resume)",
                                        "type": "string",
                                        "example": "avatar"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Media file uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "model_type": {
                                            "type": "string",
                                            "example": "App\\\\Models\\\\User"
                                        },
                                        "model_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "collection": {
                                            "type": "string",
                                            "example": "avatar"
                                        },
                                        "disk": {
                                            "type": "string",
                                            "example": "local"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "uploads/avatar123.jpg"
                                        },
                                        "mime_type": {
                                            "type": "string",
                                            "example": "image/jpeg"
                                        },
                                        "original_name": {
                                            "type": "string",
                                            "example": "profile.jpg"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/test/superadmin": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Test access for SuperAdmin",
                "description": "Returns user name and roles. Requires SuperAdmin role.",
                "operationId": "testSuperAdminAccess",
                "responses": {
                    "200": {
                        "description": "Role access granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "roles": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "SuperAdmin"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/test/admin": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Test access for Admin",
                "description": "Returns user name and roles. Requires Admin role.",
                "operationId": "testAdminAccess",
                "responses": {
                    "200": {
                        "description": "Same as above"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/test/employee": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Test access for Employee",
                "description": "Returns user name and roles. Requires Employee role.",
                "operationId": "testEmployeeAccess",
                "responses": {
                    "200": {
                        "description": "Same as above"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/test/client": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Test access for Client",
                "description": "Returns user name and roles. Requires Client role.",
                "operationId": "testClientAccess",
                "responses": {
                    "200": {
                        "description": "Same as above"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user/avatar": {
            "patch": {
                "tags": [
                    "Avatar"
                ],
                "summary": "Assign avatar to user",
                "description": "Assigns an uploaded media file as the authenticated user's avatar",
                "operationId": "assignUserAvatar",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "media_id"
                                ],
                                "properties": {
                                    "media_id": {
                                        "description": "The ID of the media file to assign as avatar",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Avatar assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Avatar assigned successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Media not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{user}": {
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete user (soft)",
                "description": "Marks a user as deleted without removing them permanently from the database.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully soft deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User successfully deleted (soft)."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "description": "Updates an existing user. Only SuperAdmin and Admin may assign roles.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 3
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Jane Updated"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jane@newmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newPassword123"
                                    },
                                    "roles": {
                                        "description": "Optional list of roles to assign (SuperAdmin/Admin only)",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "Employee"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Jane Updated"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "jane@newmail.com"
                                                },
                                                "roles": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "avatar": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 10
                                                        },
                                                        "path": {
                                                            "type": "string",
                                                            "example": "uploads/avatar.png"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of users",
                "description": "Returns a paginated list of users. Supports search, role and active status filters.",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search term for name or email",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "john"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Filter by role name",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Admin"
                        }
                    },
                    {
                        "name": "is_active",
                        "in": "query",
                        "description": "Filter by user status (1 = active, 0 = inactive)",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "example": true
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful list of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 73
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{user}/status": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user status",
                "description": "Activate or deactivate a user account",
                "operationId": "updateUserStatus",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user whose status will be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "New status for the user",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "inactive"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User status updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User status updated to inactive."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/user": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "description": "Creates a new user and optionally assigns one or more roles.",
                "operationId": "createUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    },
                                    "roles": {
                                        "description": "Array of role names to assign",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "Admin"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "john@example.com"
                                                },
                                                "roles": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "avatar": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 5
                                                        },
                                                        "path": {
                                                            "type": "string",
                                                            "example": "uploads/avatar.png"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - insufficient role"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Media",
            "description": "Media"
        },
        {
            "name": "Roles",
            "description": "Roles"
        },
        {
            "name": "Avatar",
            "description": "Avatar"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ],
    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter your token in the format: Bearer {token}",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "sanctum": []
        }
    ]
}